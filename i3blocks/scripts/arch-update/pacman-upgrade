#!/usr/bin/env python3
#
# 2024 Leonel Carrizo
# *credits to Marcel Patzwahl*
# Licensed under the terms of the GNU GPL v3 only.
#
# i3blocks blocklet script to see the available updates of pacman and the AUR

import os
import subprocess
from subprocess import check_output
import argparse

#### function definitions #####
def create_argparse():
    def _default(name, default='', arg_type=str):
        val = default
        if name in os.environ:
            val = os.environ[name]
        return arg_type(val)

    strbool = lambda s: s.lower() in ['t', 'true', '1']
    strlist = lambda s: s.split()

    parser = argparse.ArgumentParser(description='Check for pacman updates')
    parser.add_argument(
        '-b',
        '--base_color',
        default = _default('BASE_COLOR', 'green'),
        help='base color of the output(default=green)'
    )
    parser.add_argument(
        '-u',
        '--updates_available_color',
        default = _default('UPDATE_COLOR', 'yellow'),
        help='color of the output, when updates are available(default=yellow)'
    )
    parser.add_argument(
        '-q',
        '--quiet',
        action = 'store_const',
        const = True,
        default = _default('QUIET', 'False', strbool),
        help = 'Do not produce output when system is up to date'
    )
    return parser.parse_args()

def get_updates():
    output = ''
    try:
        output = check_output(['checkupdates']).decode('utf-8')
    except subprocess.CalledProcessError as exc:
        # checkupdates exits with 2 and no output if no updates are available.
        # we ignore this case and go on
        if not (exc.returncode == 2 and not exc.output):
            raise exc
    if not output:
        return []

    updates = [line.split(' ')[0]
                for line in output.split('\n')
                if line]
    return updates

###### init ######
label = os.environ.get("LABEL","")
message = "<span color='{1}'>{0}</span><span color='{1}'>{2}</span>"
message2 = "<span color='{0}'>{1}{2}</span>"
args = create_argparse()

try:
    updates = get_updates()
except:
    updates = None

if updates == None:
    update_count = -1
else:
    update_count = len(updates)
# update_count = 1
button = os.environ.get("BLOCK_BUTTON","")

### printing ######
if update_count > 0:
    if update_count > 30:
        args.updates_available_color = '#d62828'
    if (button == '3' and update_count > 0):
        try:
            output = subprocess.run(['kitty', '-e', '--title', '"updating system"', 'yay', '-Syu', '--noconfirm'])
            update_count = len(get_updates())
            if update_count == 0:
                    print(message2.format(args.base_color, ' ', ''))
            elif output.returncode != 0 and update_count > 0:
                print(message2.format('#d62828', '󰀦 ', output.returncode))
        except subprocess.CalledProcessError as err:
                print(message2.format('#d62828', '󰀦 ', err.returncode))
    if (button == '1' and update_count > 0) or update_count > 0:
        info = ' ' + str(update_count)
        print(message.format(label, args.updates_available_color, info))
elif not args.quiet:
    if update_count < 0:
        print(message2.format('yellow', '', ''))
    elif update_count == 0:
        print(message2.format(args.base_color, ' ', ''))


