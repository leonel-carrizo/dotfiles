#!/bin/bash
#----------------------------------------------------------------------------#
#           _  _____          _                 _                            # 
#          | ||___ /   ___   | | __ _ __  _ __ (_) ____ ___                  # 
#          | |  |_ \  / _ \  | |/ /| '__|| '__|| ||_  // _ \                 # 
#          | | ___) || (_) | |   < | |   | |   | | / /| (_) |                # 
#          |_||____/  \___/  |_|\_\|_|   |_|   |_|/___|\___/                 # 
#                                                                            # 
#----------------------------------------------------------------------------#

# Function to check if there are changes to commit
check_changes() {
  local staged_changes=$(git status | grep "nothing to commit, working tree clean" | wc -l)
  if [[ $staged_changes  == 1 ]]; then
    echo -e "No changes to be commited.\n"
    exit 1
  elif [[ staged_changes -le 0 ]]; then
    read -p "There are staged changes. Do you want to commit them? (y/n): " commit_choice
    case "$commit_choice" in
      y|Y)
	echo -e "Enter commit message:"
        read commit_message
        echo -e "Enter commit description, press 'Enter' to skip:"
	read commit_description
	git commit -m "$commit_message" -m "$commit_description" || handle_error "Failed to commit changes."
        ;;
      n|N)
        echo -e "Skipping commit operation.\n"
        exit 1
        ;;
      *)
       echo -e "Please enter 'y' for Yes or 'n' for No.\n"
       check_changes
       ;;
    esac
  fi
}

# Function to handle errors
handle_error() {
  echo -e "Error: $1"
  exit 1
}

# Function to ask if the user wants to push changes
ask_push() {
  read -p "You have committed changes. Do you want to push them? (y/n): " push_choice
  case "$push_choice" in
    y|Y)
      echo -e "Pushing committed changes to remote repository...\n"
      git push || handle_error "Failed to push changes to remote repository."
      ;;
    n|N)
      echo -e "Skipping push operation.\n"
      ;;
    *)
      echo -e "Please enter 'y' for Yes or 'n' for No.\n"
      ask_push
      ;;
  esac
}

# Function to perform git pull
git_pull() {
  read -p "Your branch is behind remote. Do you want to pull changes from remote repository? (y/n): " pull_choice
  case "$pull_choice" in
    y|Y)
      echo -e "Pulling changes from remote repository...\n"
      git pull || handle_error "Failed to pull changes from remote repository."
      ;;
    n|N)
      echo -e "Skipping pull operation.\n"
      ;;
    *)
      echo -e "Please enter 'y' for Yes or 'n' for No.\n"
      git_pull
      ;;
  esac
}

# Function to check for unpushed commits
check_unpushed_commits() {
  local unpushed_commits=$(git status | grep "Your branch is ahead of" | wc -l)
  if [[ $unpushed_commits -gt 0 ]]; then
    ask_push
  fi
}

# Function to check for untracked files
check_untracked_files() {
  local unstaged_files_count=$(git status | grep "Changes not staged for commit" | wc -l)
  local untracked_files_count=$(git status | grep "Untracked" | wc -l)
  if [[ $unstaged_files_count -gt 0 || $untracked_files_count -gt 0 ]]; then
    read -p "There are untracked files. Do you want to add them to staging area? (y/n): " add_choice
    case "$add_choice" in
      y|Y)
        echo -e "Adding untracked files to staging area...\n"
        git add .
        ;;
      n|N)
        echo -e "Skipping adding untracked files to staging area.\n"
        ;;
      *)
        echo -e "Please enter 'y' for Yes or 'n' for No.\n"
        check_untracked_files
	;;
    esac
  fi
}

####### Main script ###########
git status >/dev/null 2>&1 || handle_error "This is not a git repository."

git status -uno | grep "Your branch is behind" >/dev/null && git_pull

# Check for uncommitted changes
check_unpushed_commits

check_untracked_files

check_changes

check_unpushed_commits

echo -e "Changes successfully committed and pushed.\n"

